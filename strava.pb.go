// HomeDashboard Strava Athlete Stats Event Schema.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: strava.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AthleteStats contains stats, current year and total, together with latest activities of an athlete.
type AthleteStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ActivityStats contains current year and total stats for an athlete.
	ActivityStats *ActivityStats `protobuf:"bytes,1,opt,name=ActivityStats,proto3" json:"ActivityStats,omitempty"`
	// List of latest activities of an athlete.
	Activities []*Activity `protobuf:"bytes,2,rep,name=Activities,proto3" json:"Activities,omitempty"`
	// Timestamp,  point in time this stats has been retrieved from Strava.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AthleteStats) Reset() {
	*x = AthleteStats{}
	mi := &file_strava_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AthleteStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteStats) ProtoMessage() {}

func (x *AthleteStats) ProtoReflect() protoreflect.Message {
	mi := &file_strava_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteStats.ProtoReflect.Descriptor instead.
func (*AthleteStats) Descriptor() ([]byte, []int) {
	return file_strava_proto_rawDescGZIP(), []int{0}
}

func (x *AthleteStats) GetActivityStats() *ActivityStats {
	if x != nil {
		return x.ActivityStats
	}
	return nil
}

func (x *AthleteStats) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *AthleteStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// ActivityTotal contains current year and total stats for an athlete.
type ActivityStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The longest distance ridden by the athlete.
	BiggestRideDistance float64 `protobuf:"fixed64,1,opt,name=BiggestRideDistance,proto3" json:"BiggestRideDistance,omitempty"`
	// The recent (last 4 weeks) ride stats for the athlete.
	RecentRideTotals *ActivityTotal `protobuf:"bytes,2,opt,name=RecentRideTotals,proto3" json:"RecentRideTotals,omitempty"`
	// The recent (last 4 weeks) run stats for the athlete.
	RecentRunTotals *ActivityTotal `protobuf:"bytes,3,opt,name=RecentRunTotals,proto3" json:"RecentRunTotals,omitempty"`
	// The year to date ride stats for the athlete.
	YearToDateRideTotals *ActivityTotal `protobuf:"bytes,4,opt,name=YearToDateRideTotals,proto3" json:"YearToDateRideTotals,omitempty"`
	// The year to date run stats for the athlete.
	YearToDateRunTotals *ActivityTotal `protobuf:"bytes,5,opt,name=YearToDateRunTotals,proto3" json:"YearToDateRunTotals,omitempty"`
	// The all time ride stats for the aTthlete.
	AllRideotals *ActivityTotal `protobuf:"bytes,6,opt,name=AllRideotals,proto3" json:"AllRideotals,omitempty"`
	// The all time run stats for the athlete.
	AllRunTotals  *ActivityTotal `protobuf:"bytes,7,opt,name=AllRunTotals,proto3" json:"AllRunTotals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityStats) Reset() {
	*x = ActivityStats{}
	mi := &file_strava_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityStats) ProtoMessage() {}

func (x *ActivityStats) ProtoReflect() protoreflect.Message {
	mi := &file_strava_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityStats.ProtoReflect.Descriptor instead.
func (*ActivityStats) Descriptor() ([]byte, []int) {
	return file_strava_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityStats) GetBiggestRideDistance() float64 {
	if x != nil {
		return x.BiggestRideDistance
	}
	return 0
}

func (x *ActivityStats) GetRecentRideTotals() *ActivityTotal {
	if x != nil {
		return x.RecentRideTotals
	}
	return nil
}

func (x *ActivityStats) GetRecentRunTotals() *ActivityTotal {
	if x != nil {
		return x.RecentRunTotals
	}
	return nil
}

func (x *ActivityStats) GetYearToDateRideTotals() *ActivityTotal {
	if x != nil {
		return x.YearToDateRideTotals
	}
	return nil
}

func (x *ActivityStats) GetYearToDateRunTotals() *ActivityTotal {
	if x != nil {
		return x.YearToDateRunTotals
	}
	return nil
}

func (x *ActivityStats) GetAllRideotals() *ActivityTotal {
	if x != nil {
		return x.AllRideotals
	}
	return nil
}

func (x *ActivityStats) GetAllRunTotals() *ActivityTotal {
	if x != nil {
		return x.AllRunTotals
	}
	return nil
}

type ActivityTotal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of activities considered in this total.
	Count int64 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	// The total distance covered by the considered activities.
	Distance float64 `protobuf:"fixed64,2,opt,name=Distance,proto3" json:"Distance,omitempty"`
	// The total moving time of the considered activities in seconds.
	MovingTime    int64 `protobuf:"varint,3,opt,name=MovingTime,proto3" json:"MovingTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityTotal) Reset() {
	*x = ActivityTotal{}
	mi := &file_strava_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTotal) ProtoMessage() {}

func (x *ActivityTotal) ProtoReflect() protoreflect.Message {
	mi := &file_strava_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTotal.ProtoReflect.Descriptor instead.
func (*ActivityTotal) Descriptor() ([]byte, []int) {
	return file_strava_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityTotal) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityTotal) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *ActivityTotal) GetMovingTime() int64 {
	if x != nil {
		return x.MovingTime
	}
	return 0
}

// Description of a single activity.
type Activity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the activity.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// The activity's distance.
	Distance float64 `protobuf:"fixed64,2,opt,name=Distance,proto3" json:"Distance,omitempty"`
	// The activity's moving time.
	MovingTime int64 `protobuf:"varint,3,opt,name=MovingTime,proto3" json:"MovingTime,omitempty"`
	// Type of an activity.
	SportType string `protobuf:"bytes,4,opt,name=SportType,proto3" json:"SportType,omitempty"`
	// Timestamp an activity is related to.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_strava_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_strava_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_strava_proto_rawDescGZIP(), []int{3}
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Activity) GetMovingTime() int64 {
	if x != nil {
		return x.MovingTime
	}
	return 0
}

func (x *Activity) GetSportType() string {
	if x != nil {
		return x.SportType
	}
	return ""
}

func (x *Activity) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_strava_proto protoreflect.FileDescriptor

const file_strava_proto_rawDesc = "" +
	"\n" +
	"\fstrava.proto\x12\x06events\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb7\x01\n" +
	"\fAthleteStats\x12;\n" +
	"\rActivityStats\x18\x01 \x01(\v2\x15.events.ActivityStatsR\rActivityStats\x120\n" +
	"\n" +
	"Activities\x18\x02 \x03(\v2\x10.events.ActivityR\n" +
	"Activities\x128\n" +
	"\tTimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tTimestamp\"\xcf\x03\n" +
	"\rActivityStats\x120\n" +
	"\x13BiggestRideDistance\x18\x01 \x01(\x01R\x13BiggestRideDistance\x12A\n" +
	"\x10RecentRideTotals\x18\x02 \x01(\v2\x15.events.ActivityTotalR\x10RecentRideTotals\x12?\n" +
	"\x0fRecentRunTotals\x18\x03 \x01(\v2\x15.events.ActivityTotalR\x0fRecentRunTotals\x12I\n" +
	"\x14YearToDateRideTotals\x18\x04 \x01(\v2\x15.events.ActivityTotalR\x14YearToDateRideTotals\x12G\n" +
	"\x13YearToDateRunTotals\x18\x05 \x01(\v2\x15.events.ActivityTotalR\x13YearToDateRunTotals\x129\n" +
	"\fAllRideotals\x18\x06 \x01(\v2\x15.events.ActivityTotalR\fAllRideotals\x129\n" +
	"\fAllRunTotals\x18\a \x01(\v2\x15.events.ActivityTotalR\fAllRunTotals\"a\n" +
	"\rActivityTotal\x12\x14\n" +
	"\x05Count\x18\x01 \x01(\x03R\x05Count\x12\x1a\n" +
	"\bDistance\x18\x02 \x01(\x01R\bDistance\x12\x1e\n" +
	"\n" +
	"MovingTime\x18\x03 \x01(\x03R\n" +
	"MovingTime\"\xb2\x01\n" +
	"\bActivity\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x1a\n" +
	"\bDistance\x18\x02 \x01(\x01R\bDistance\x12\x1e\n" +
	"\n" +
	"MovingTime\x18\x03 \x01(\x03R\n" +
	"MovingTime\x12\x1c\n" +
	"\tSportType\x18\x04 \x01(\tR\tSportType\x128\n" +
	"\tTimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tTimestampB\n" +
	"Z\b.;eventsb\x06proto3"

var (
	file_strava_proto_rawDescOnce sync.Once
	file_strava_proto_rawDescData []byte
)

func file_strava_proto_rawDescGZIP() []byte {
	file_strava_proto_rawDescOnce.Do(func() {
		file_strava_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_strava_proto_rawDesc), len(file_strava_proto_rawDesc)))
	})
	return file_strava_proto_rawDescData
}

var file_strava_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_strava_proto_goTypes = []any{
	(*AthleteStats)(nil),          // 0: events.AthleteStats
	(*ActivityStats)(nil),         // 1: events.ActivityStats
	(*ActivityTotal)(nil),         // 2: events.ActivityTotal
	(*Activity)(nil),              // 3: events.Activity
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_strava_proto_depIdxs = []int32{
	1,  // 0: events.AthleteStats.ActivityStats:type_name -> events.ActivityStats
	3,  // 1: events.AthleteStats.Activities:type_name -> events.Activity
	4,  // 2: events.AthleteStats.Timestamp:type_name -> google.protobuf.Timestamp
	2,  // 3: events.ActivityStats.RecentRideTotals:type_name -> events.ActivityTotal
	2,  // 4: events.ActivityStats.RecentRunTotals:type_name -> events.ActivityTotal
	2,  // 5: events.ActivityStats.YearToDateRideTotals:type_name -> events.ActivityTotal
	2,  // 6: events.ActivityStats.YearToDateRunTotals:type_name -> events.ActivityTotal
	2,  // 7: events.ActivityStats.AllRideotals:type_name -> events.ActivityTotal
	2,  // 8: events.ActivityStats.AllRunTotals:type_name -> events.ActivityTotal
	4,  // 9: events.Activity.Timestamp:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_strava_proto_init() }
func file_strava_proto_init() {
	if File_strava_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_strava_proto_rawDesc), len(file_strava_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strava_proto_goTypes,
		DependencyIndexes: file_strava_proto_depIdxs,
		MessageInfos:      file_strava_proto_msgTypes,
	}.Build()
	File_strava_proto = out.File
	file_strava_proto_goTypes = nil
	file_strava_proto_depIdxs = nil
}
