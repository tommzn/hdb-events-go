// HomeDashboard Weather Event Schema.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: weather.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Weather data contains current weather and a 7-days forecast for a given location.
type WeatherData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Location a weather information belongs to
	Location *Location `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	// Defines units for temperature and wind speed. Possible values are: default, metric, imperial
	Units string `protobuf:"bytes,2,opt,name=Units,proto3" json:"Units,omitempty"`
	// Current weather data
	Current *CurrentWeather `protobuf:"bytes,3,opt,name=Current,proto3" json:"Current,omitempty"`
	// 7-days forecast
	Forecast []*ForecastWeather `protobuf:"bytes,4,rep,name=Forecast,proto3" json:"Forecast,omitempty"`
	// 48 hours forecast
	HourlyForecast []*CurrentWeather `protobuf:"bytes,5,rep,name=HourlyForecast,proto3" json:"HourlyForecast,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WeatherData) Reset() {
	*x = WeatherData{}
	mi := &file_weather_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeatherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherData) ProtoMessage() {}

func (x *WeatherData) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherData.ProtoReflect.Descriptor instead.
func (*WeatherData) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{0}
}

func (x *WeatherData) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *WeatherData) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *WeatherData) GetCurrent() *CurrentWeather {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *WeatherData) GetForecast() []*ForecastWeather {
	if x != nil {
		return x.Forecast
	}
	return nil
}

func (x *WeatherData) GetHourlyForecast() []*CurrentWeather {
	if x != nil {
		return x.HourlyForecast
	}
	return nil
}

// Current weather data.
type CurrentWeather struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp a weather infirmation is related to.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// Temperature. Units - default: kelvin, metric: Celsius, imperial: Fahrenheit
	Temperature float64 `protobuf:"fixed64,2,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	// Wind speed. Wind speed. Units – default: metre/sec, metric: metre/sec, imperial: miles/hour
	WindSpeed float64 `protobuf:"fixed64,3,opt,name=WindSpeed,proto3" json:"WindSpeed,omitempty"`
	// Weather details
	Weather *WeatherDetails `protobuf:"bytes,4,opt,name=Weather,proto3" json:"Weather,omitempty"`
	// Wind direction, degrees (meteorological)
	WindDirection int64 `protobuf:"varint,5,opt,name=WindDirection,proto3" json:"WindDirection,omitempty"`
	// Wind gust. Wind gust. Units – default: metre/sec, metric: metre/sec, imperial: miles/hour.
	WindGust float64 `protobuf:"fixed64,6,opt,name=WindGust,proto3" json:"WindGust,omitempty"`
	// Rain mm/h (Liter/hour)
	Rain          float64 `protobuf:"fixed64,7,opt,name=Rain,proto3" json:"Rain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrentWeather) Reset() {
	*x = CurrentWeather{}
	mi := &file_weather_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentWeather) ProtoMessage() {}

func (x *CurrentWeather) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentWeather.ProtoReflect.Descriptor instead.
func (*CurrentWeather) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentWeather) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CurrentWeather) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *CurrentWeather) GetWindSpeed() float64 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *CurrentWeather) GetWeather() *WeatherDetails {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *CurrentWeather) GetWindDirection() int64 {
	if x != nil {
		return x.WindDirection
	}
	return 0
}

func (x *CurrentWeather) GetWindGust() float64 {
	if x != nil {
		return x.WindGust
	}
	return 0
}

func (x *CurrentWeather) GetRain() float64 {
	if x != nil {
		return x.Rain
	}
	return 0
}

// ForeCastWeather contains forecast weather data for a single day
type ForecastWeather struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp a weather infirmation is related to.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// Forecast temperatures for the whole day
	Temperatures *ForecastTemperatures `protobuf:"bytes,2,opt,name=Temperatures,proto3" json:"Temperatures,omitempty"`
	// Wind speed. Wind speed. Units – default: metre/sec, metric: metre/sec, imperial: miles/hour
	WindSpeed float64 `protobuf:"fixed64,3,opt,name=WindSpeed,proto3" json:"WindSpeed,omitempty"`
	// Weather details
	Weather       *WeatherDetails `protobuf:"bytes,4,opt,name=Weather,proto3" json:"Weather,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForecastWeather) Reset() {
	*x = ForecastWeather{}
	mi := &file_weather_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForecastWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastWeather) ProtoMessage() {}

func (x *ForecastWeather) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastWeather.ProtoReflect.Descriptor instead.
func (*ForecastWeather) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{2}
}

func (x *ForecastWeather) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ForecastWeather) GetTemperatures() *ForecastTemperatures {
	if x != nil {
		return x.Temperatures
	}
	return nil
}

func (x *ForecastWeather) GetWindSpeed() float64 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *ForecastWeather) GetWeather() *WeatherDetails {
	if x != nil {
		return x.Weather
	}
	return nil
}

// WeatherDetails contains information of current weather or forecast
// Full list of condition id, group and description and Icons is available at: https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2
type WeatherDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Weather condition id
	ConditionId int64 `protobuf:"varint,1,opt,name=ConditionId,proto3" json:"ConditionId,omitempty"`
	// Group of weather parameters (Rain, Snow, Extreme etc.)
	Group string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	// Weather condition within the group
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Weather icon from Open Weather Map
	Icon          string `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeatherDetails) Reset() {
	*x = WeatherDetails{}
	mi := &file_weather_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeatherDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherDetails) ProtoMessage() {}

func (x *WeatherDetails) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherDetails.ProtoReflect.Descriptor instead.
func (*WeatherDetails) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{3}
}

func (x *WeatherDetails) GetConditionId() int64 {
	if x != nil {
		return x.ConditionId
	}
	return 0
}

func (x *WeatherDetails) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *WeatherDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WeatherDetails) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// forecastTemperature contains forecast temperature data for a single day
// Units – default: kelvin, metric: Celsius, imperial: Fahrenheit
type ForecastTemperatures struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Morning temperature
	Morning float64 `protobuf:"fixed64,1,opt,name=Morning,proto3" json:"Morning,omitempty"`
	// Day temperature
	Day float64 `protobuf:"fixed64,2,opt,name=Day,proto3" json:"Day,omitempty"`
	// Evening temperature
	Evening float64 `protobuf:"fixed64,3,opt,name=Evening,proto3" json:"Evening,omitempty"`
	// Night temperature
	Night float64 `protobuf:"fixed64,4,opt,name=Night,proto3" json:"Night,omitempty"`
	// Min daily temperature.
	DayMin float64 `protobuf:"fixed64,5,opt,name=DayMin,proto3" json:"DayMin,omitempty"`
	// Max daily temperature.
	DayMax        float64 `protobuf:"fixed64,6,opt,name=DayMax,proto3" json:"DayMax,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForecastTemperatures) Reset() {
	*x = ForecastTemperatures{}
	mi := &file_weather_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForecastTemperatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastTemperatures) ProtoMessage() {}

func (x *ForecastTemperatures) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastTemperatures.ProtoReflect.Descriptor instead.
func (*ForecastTemperatures) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{4}
}

func (x *ForecastTemperatures) GetMorning() float64 {
	if x != nil {
		return x.Morning
	}
	return 0
}

func (x *ForecastTemperatures) GetDay() float64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ForecastTemperatures) GetEvening() float64 {
	if x != nil {
		return x.Evening
	}
	return 0
}

func (x *ForecastTemperatures) GetNight() float64 {
	if x != nil {
		return x.Night
	}
	return 0
}

func (x *ForecastTemperatures) GetDayMin() float64 {
	if x != nil {
		return x.DayMin
	}
	return 0
}

func (x *ForecastTemperatures) GetDayMax() float64 {
	if x != nil {
		return x.DayMax
	}
	return 0
}

// Geographical coordinates weather information are related to
type Location struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Longitude coordinate.
	Longitude float64 `protobuf:"fixed64,1,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	// Latitude coordinate.
	Latitude      float64 `protobuf:"fixed64,2,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_weather_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{5}
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

var File_weather_proto protoreflect.FileDescriptor

const file_weather_proto_rawDesc = "" +
	"\n" +
	"\rweather.proto\x12\x06events\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf8\x01\n" +
	"\vWeatherData\x12,\n" +
	"\bLocation\x18\x01 \x01(\v2\x10.events.LocationR\bLocation\x12\x14\n" +
	"\x05Units\x18\x02 \x01(\tR\x05Units\x120\n" +
	"\aCurrent\x18\x03 \x01(\v2\x16.events.CurrentWeatherR\aCurrent\x123\n" +
	"\bForecast\x18\x04 \x03(\v2\x17.events.ForecastWeatherR\bForecast\x12>\n" +
	"\x0eHourlyForecast\x18\x05 \x03(\v2\x16.events.CurrentWeatherR\x0eHourlyForecast\"\x92\x02\n" +
	"\x0eCurrentWeather\x128\n" +
	"\tTimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tTimestamp\x12 \n" +
	"\vTemperature\x18\x02 \x01(\x01R\vTemperature\x12\x1c\n" +
	"\tWindSpeed\x18\x03 \x01(\x01R\tWindSpeed\x120\n" +
	"\aWeather\x18\x04 \x01(\v2\x16.events.WeatherDetailsR\aWeather\x12$\n" +
	"\rWindDirection\x18\x05 \x01(\x03R\rWindDirection\x12\x1a\n" +
	"\bWindGust\x18\x06 \x01(\x01R\bWindGust\x12\x12\n" +
	"\x04Rain\x18\a \x01(\x01R\x04Rain\"\xdd\x01\n" +
	"\x0fForecastWeather\x128\n" +
	"\tTimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tTimestamp\x12@\n" +
	"\fTemperatures\x18\x02 \x01(\v2\x1c.events.ForecastTemperaturesR\fTemperatures\x12\x1c\n" +
	"\tWindSpeed\x18\x03 \x01(\x01R\tWindSpeed\x120\n" +
	"\aWeather\x18\x04 \x01(\v2\x16.events.WeatherDetailsR\aWeather\"~\n" +
	"\x0eWeatherDetails\x12 \n" +
	"\vConditionId\x18\x01 \x01(\x03R\vConditionId\x12\x14\n" +
	"\x05Group\x18\x02 \x01(\tR\x05Group\x12 \n" +
	"\vDescription\x18\x03 \x01(\tR\vDescription\x12\x12\n" +
	"\x04Icon\x18\x04 \x01(\tR\x04Icon\"\xa2\x01\n" +
	"\x14ForecastTemperatures\x12\x18\n" +
	"\aMorning\x18\x01 \x01(\x01R\aMorning\x12\x10\n" +
	"\x03Day\x18\x02 \x01(\x01R\x03Day\x12\x18\n" +
	"\aEvening\x18\x03 \x01(\x01R\aEvening\x12\x14\n" +
	"\x05Night\x18\x04 \x01(\x01R\x05Night\x12\x16\n" +
	"\x06DayMin\x18\x05 \x01(\x01R\x06DayMin\x12\x16\n" +
	"\x06DayMax\x18\x06 \x01(\x01R\x06DayMax\"D\n" +
	"\bLocation\x12\x1c\n" +
	"\tLongitude\x18\x01 \x01(\x01R\tLongitude\x12\x1a\n" +
	"\bLatitude\x18\x02 \x01(\x01R\bLatitudeB\n" +
	"Z\b.;eventsb\x06proto3"

var (
	file_weather_proto_rawDescOnce sync.Once
	file_weather_proto_rawDescData []byte
)

func file_weather_proto_rawDescGZIP() []byte {
	file_weather_proto_rawDescOnce.Do(func() {
		file_weather_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_weather_proto_rawDesc), len(file_weather_proto_rawDesc)))
	})
	return file_weather_proto_rawDescData
}

var file_weather_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_weather_proto_goTypes = []any{
	(*WeatherData)(nil),           // 0: events.WeatherData
	(*CurrentWeather)(nil),        // 1: events.CurrentWeather
	(*ForecastWeather)(nil),       // 2: events.ForecastWeather
	(*WeatherDetails)(nil),        // 3: events.WeatherDetails
	(*ForecastTemperatures)(nil),  // 4: events.ForecastTemperatures
	(*Location)(nil),              // 5: events.Location
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_weather_proto_depIdxs = []int32{
	5, // 0: events.WeatherData.Location:type_name -> events.Location
	1, // 1: events.WeatherData.Current:type_name -> events.CurrentWeather
	2, // 2: events.WeatherData.Forecast:type_name -> events.ForecastWeather
	1, // 3: events.WeatherData.HourlyForecast:type_name -> events.CurrentWeather
	6, // 4: events.CurrentWeather.Timestamp:type_name -> google.protobuf.Timestamp
	3, // 5: events.CurrentWeather.Weather:type_name -> events.WeatherDetails
	6, // 6: events.ForecastWeather.Timestamp:type_name -> google.protobuf.Timestamp
	4, // 7: events.ForecastWeather.Temperatures:type_name -> events.ForecastTemperatures
	3, // 8: events.ForecastWeather.Weather:type_name -> events.WeatherDetails
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_weather_proto_init() }
func file_weather_proto_init() {
	if File_weather_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_weather_proto_rawDesc), len(file_weather_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_weather_proto_goTypes,
		DependencyIndexes: file_weather_proto_depIdxs,
		MessageInfos:      file_weather_proto_msgTypes,
	}.Build()
	File_weather_proto = out.File
	file_weather_proto_goTypes = nil
	file_weather_proto_depIdxs = nil
}
